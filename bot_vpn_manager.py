# bot_vpn_manager.py
import logging
import asyncio
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# –§–∏–ª—å—Ç—Ä—ã –∏–∑ aiogram 3.x
from aiogram.filters import Command, Text
# –í–∞–∂–Ω–æ: DefaultBotProperties –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
from aiogram.client.bot import DefaultBotProperties

from config import Config
from vpn_service import VPNService
from promocode import PromocodeService
from request_service import RequestService, Request
from json_utils import JSONDataStore

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (aiogram 3.x)
bot = Bot(
    token=config.TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â –¥–∞–Ω–Ω—ã—Ö
users_store = JSONDataStore(config.USERS_FILE)
promocodes_store = JSONDataStore(config.PROMOCODES_FILE)
requests_store = JSONDataStore(config.REQUESTS_FILE)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
promocode_service = PromocodeService(promocodes_store)
request_service = RequestService(requests_store)
vpn_service = VPNService(
    users_store=users_store,
    promocodes_store=promocodes_store,
    requests_store=requests_store,
    config=config,
    promocode_service=promocode_service,
    request_service=request_service,
    bot=bot  # –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
)

# ====================== –°–æ—Å—Ç–æ—è–Ω–∏—è ======================

class SendRequestForm(StatesGroup):
    waiting_for_details = State()

class RespondRequest(StatesGroup):
    waiting_for_request_id = State()
    waiting_for_response_message = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å register(...) –≤—Ä—É—á–Ω—É—é)
class PromoCodeForm(StatesGroup):
    waiting_for_promo = State()

# ====================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======================

def get_user_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üìÑ –û—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ –ü—Ä–æ–º–æ–∫–æ–¥"),
        KeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    )
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ü–æ–¥–ø–∏—Å–∫–∏"))
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞—è–≤–∫–∏"),
        KeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ó–∞—è–≤–∫—É")
    )
    keyboard.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

# ====================== –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ ======================

def is_admin(user_id: int) -> bool:
    return user_id in config.BOT_ADMINS

# ====================== –•–µ–Ω–¥–ª–µ—Ä—ã ======================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (3.x: @dp.message(Command("start")))
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if is_admin(user_id):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_user_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "üìÑ –û—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ –ü—Ä–æ–º–æ–∫–æ–¥"
# –í–º–µ—Å—Ç–æ lambda message: message.text == "..." –∏—Å–ø–æ–ª—å–∑—É–µ–º @dp.message(Text("..."))
@dp.message(Text("üìÑ –û—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ –ü—Ä–æ–º–æ–∫–æ–¥"))
async def cmd_subscribe_promo(message: types.Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥
    await message.answer(
        "üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=ReplyKeyboardRemove()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.set_state(PromoCodeForm.waiting_for_promo)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ PromoCodeForm.waiting_for_promo)
@dp.message(PromoCodeForm.waiting_for_promo)
async def process_promo_code(message: types.Message, state: FSMContext):
    promo_code = message.text.strip()
    user_id = message.from_user.id

    success = await vpn_service.apply_promocode(user_id, promo_code)
    if success:
        await message.answer(
            "‚úÖ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=get_user_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ "
            "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_user_keyboard()
        )

    # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
@dp.message(Text("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"))
async def cmd_send_request(message: types.Message, state: FSMContext):
    await SendRequestForm.waiting_for_details.set()
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ "
        "–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å):",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ SendRequestForm.waiting_for_details)
@dp.message(SendRequestForm.waiting_for_details, F.text)
async def process_request_details(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    details = {"message": message.text.strip()}

    request_id = await request_service.generate_new_request_id()
    timestamp = int(datetime.now(timezone.utc).timestamp() * 1000)
    new_request = Request(
        request_id=request_id,
        user_id=user_id,
        details=details,
        status="pending",
        timestamp=timestamp
    )

    success = await request_service.create_request(new_request)
    if success:
        await message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_user_keyboard()
        )
        logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω–∞.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in config.BOT_ADMINS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=(f"üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n"
                          f"ID –∑–∞—è–≤–∫–∏: {request_id}")
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_keyboard()
        )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç—É—Å –ü–æ–¥–ø–∏—Å–∫–∏"
@dp.message(Text("üìä –°—Ç–∞—Ç—É—Å –ü–æ–¥–ø–∏—Å–∫–∏"))
async def cmd_status(message: types.Message):
    user_id = message.from_user.id
    client_data = await vpn_service.get_client_data(user_id)
    if client_data:
        expiry_datetime = datetime.fromtimestamp(
            client_data.expiry_time / 1000
        ).strftime('%Y-%m-%d %H:%M:%S')

        status_message = (
            f"üîπ **–°—Ç–∞—Ç—É—Å –ü–æ–¥–ø–∏—Å–∫–∏** üîπ\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {client_data.max_devices}\n"
            f"–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {client_data.traffic_total} GB\n"
            f"–û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫: {client_data.traffic_remaining} GB\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {client_data.traffic_used} GB\n"
            f"–¢—Ä–∞—Ñ–∏–∫ –≤–≤–µ—Ä—Ö: {client_data.traffic_up} GB\n"
            f"–¢—Ä–∞—Ñ–∏–∫ –≤–Ω–∏–∑: {client_data.traffic_down} GB\n"
            f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {expiry_datetime}"
        )
        await message.answer(status_message, reply_markup=get_user_keyboard())
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_user_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞—è–≤–∫–∏" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Text("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞—è–≤–∫–∏"))
async def cmd_view_requests(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    pending_requests = await request_service.list_requests(status_filter="pending")
    if not pending_requests:
        await message.answer(
            "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            reply_markup=get_admin_keyboard()
        )
        return

    response = "üìÑ **–°–ø–∏—Å–æ–∫ –ù–æ–≤—ã—Ö –ó–∞—è–≤–æ–∫:**\n\n"
    for req in pending_requests:
        response += (
            f"üîπ **ID –∑–∞—è–≤–∫–∏:** {req.request_id}\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:** {req.user_id}\n"
            f"üìã **–î–µ—Ç–∞–ª–∏:** {req.details.get('message', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}\n"
            f"üìÖ **–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:** "
            f"{datetime.fromtimestamp(req.timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        )

    await message.answer(response, reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ó–∞—è–≤–∫—É" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Text("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ó–∞—è–≤–∫—É"))
async def cmd_respond_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await RespondRequest.waiting_for_request_id.set()
    await message.answer(
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(RespondRequest.waiting_for_request_id, F.text)
async def process_request_id(message: types.Message, state: FSMContext):
    request_id = message.text.strip()
    current_request = await request_service.get_request(request_id)

    if not current_request or current_request.status != "pending":
        await message.answer(
            "‚ùå –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    await state.update_data(request_id=request_id)
    await RespondRequest.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ waiting_for_response_message
    await message.answer(
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(RespondRequest.waiting_for_response_message, F.text)
async def process_response_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    request_id = user_data.get("request_id")
    response_message = message.text.strip()

    success = await vpn_service.respond_to_request(request_id, response_message)
    if success:
        await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
            reply_markup=get_admin_keyboard()
        )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@dp.message(Text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
async def cmd_back_to_admin(message: types.Message):
    user_id = message.from_user.id
    if is_admin(user_id):
        await message.answer(
            "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_keyboard()
        )

# ====================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======================

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ VPN (–ª–æ–≥–∏–Ω –≤ 3x-ui)
    await vpn_service.initialize()

    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        # –í aiogram 3.x –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –ø–µ—Ä–µ–¥–∞—ë–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
